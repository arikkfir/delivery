name: Deploy to Environment
on:
  workflow_call:
    inputs:
      branch:
        type: string
        description: |
          Source branch being deployed to this environment. This will be used, after being "slugged", to infer the
          target environment to deploy the list of images provided in the `images` input.
        required: true
      images:
        type: string
        description: |
          Map of images to deploy, in YAML format of "image: tag" pairs, for example:

          ```
          my-image: newTag
          my-2nd-image: new2ndTag
          ```

          This MUST be a valid YAML object - thus the space after the `:` character is crucial.
        required: true
defaults:
  run:
    shell: bash -exuo pipefail {0}
env:
  FLUXCD_VERSION: 2.1.0
  GCP_CLI_VERSION: 443.0.0
  GCP_SERVICE_ACCOUNT: delivery@arikkfir.iam.gserviceaccount.com
  GCP_WORKLOAD_IDENTITY_PROVIDER: projects/8909046976/locations/global/workloadIdentityPools/github-actions/providers/github-oidc
  GKE_CLUSTER_NAME: main
  GKE_CLUSTER_LOCATION: me-west1-a
jobs:
  slug:
    name: Slug
    runs-on: ubuntu-22.04
    outputs:
      slug: ${{ steps.slug.outputs.slug }}
    steps:
      - id: validate
        run: |
          if [[ -z "${BRANCH}" ]]; then
              echo "Missing branch input"
              exit 1
          fi
        env:
          BRANCH: ${{ inputs.branch }}
      - id: slug
        run: |
          SLUG=$(echo -n "${{ inputs.branch }}" | sed -E 's/[^a-zA-Z0-9_]+/-/g' | sed -E 's/^-|-$//g' | tr '[:upper:]' '[:lower:]')
          echo "slug=${SLUG}" >> "$GITHUB_OUTPUT"
  deploy:
    name: Deploy images to environment
    needs: slug
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    environment: ${{ needs.slug.outputs.slug }}
    env:
      ENV_NAME: ${{ needs.slug.outputs.slug }}
      ENV_FLUX_K_NAME: env-${{ needs.slug.outputs.slug }}
      ENV_FLUX_K_FILE: clusters/${GKE_CLUSTER_NAME}/environments/${{ needs.slug.outputs.slug }}.yaml
      ENV_K_FILE: environments/${{ needs.slug.outputs.slug }}/kustomization.yaml
    steps:
      - uses: actions/checkout@v3
        with:
          repository: arikkfir/delivery
          token: ${{ secrets.ARIKKFIR_GHA_AUTOMATION }} # Required since this workflow is called by other repositories
      - run: |
          [[ -f "${ENV_FLUX_K_FILE}" ]] || cat etc/env-flux-kustomization-template.yaml | envsubst > "${ENV_FLUX_K_FILE}"
          [[ -f "${ENV_K_FILE}" ]] || (mkdir -pv "$(dirname "${ENV_K_FILE}")" && cat etc/env-kustomization-template.yaml > "${ENV_K_FILE}")
          [[ "$(yq e '.images == null' "${ENV_K_FILE}")" == "false" ]] || yq e -i '.images = []' "${ENV_K_FILE}"
          [[ "$(yq e '.patches == null' "${ENV_K_FILE}")" == "false" ]] || yq e -i '.patches = []' "${ENV_K_FILE}"
      - if: env.ENV_NAME != 'main'
        run: |
          [[ "$(yq e '.resources == null' "${ENV_K_FILE}"))" == "false" ]] || yq e -i '.resources = ["../main"]' "${ENV_K_FILE}"
          yq e -i '.patches -= load("etc/stale-env-patches.yaml")' "${ENV_K_FILE}"
      - run: |
          cat > new-images.yaml <<EOF
          ${{ inputs.images }}
          EOF
          
          # Merge the existing images in the environment kustomization with the newly given images map
          # This requires first converting the existing images array into a map, performing the merge, and then store
          # the result back into the kustomization "images" property
          yq e -i '. ref $k | .images[] as $i ireduce( {}; .[$i|.name]=($i|.newTag) ) | . * load("new-images.yaml") | $k.images = . | $k' kustomization.yaml
      - uses: EndBug/add-and-commit@v9
        with:
          add: ${{ env.ENV_FLUX_K_FILE }} ${{ env.ENV_K_FILE }}
          author_name: GitHub Actions
          author_email: <delivery@kfirs.com>
          message: "Deployment to \"${{ needs.slug.outputs.slug }}\" from \"${{ github.repository }}\" \n\nEnvironment:       ${{ needs.slug.outputs.slug }}\nSource repository: ${{ github.repository }}\nBranch:            ${{ inputs.branch }}"
  verify-env-is-up:
    name: Wait for environment to be up
    needs:
      - slug
      - deploy
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
    environment: ${{ needs.slug.outputs.slug }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: arikkfir/delivery
          token: ${{ secrets.ARIKKFIR_GHA_AUTOMATION }}
      - uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: gke-gcloud-auth-plugin
          version: ${{ env.GCP_CLI_VERSION }}
      - uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER_NAME }}
          location: ${{ env.GKE_CLUSTER_LOCATION }}
      - uses: fluxcd/flux2/action@main
        with:
          version: ${{ env.FLUXCD_VERSION }}
      - run: flux --timeout 30m0s reconcile -n default kustomization env-${ENVIRONMENT}
        env:
          ENVIRONMENT: ${{ needs.slug.outputs.slug }}
